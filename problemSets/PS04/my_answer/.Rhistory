chosen_order1 <- arima_model$arma[c(1,6,2)]
# Print the chosen ARIMA parameters
cat("Chosen ARIMA 1 parameters (p,d,q):", chosen_order1, "\n")
## For lagged data
# Fit an ARIMA model using auto.arima function
arima_model2 <- auto.arima(diff(diff(maints, lag = 12), lag = 1))
# Print the model summary
print(summary(arima_model2))
# Extract the chosen ARIMA parameters
chosen_order2 <- arima_model2$arma[c(1,6,2)]
# Print the chosen ARIMA parameters
cat("Chosen ARIMA 2 parameters (p,d,q):", chosen_order2, "\n")
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals1 <- residuals(arima_model1)
Acf(residuals2)
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model1)
Acf(residuals2)
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
gglagplot(maints, title = "Original Data")
ggAcf(maints, title = "Original Data")
gglagplot(diff(diff(maints, lag = 1), lag = 1), title = "Lag = 1")
ggAcf(diff(diff(maints, lag = 1), lag = 1), title = "Lag = 1")
gglagplot(diff(diff(maints, lag = 12), lag = 1), title = "Lag = 12")
ggAcf(diff(diff(maints, lag = 12), lag = 1), title = "Lag = 12")
gglagplot(maints, main = "Original Data")
ggAcf(maints, title = "Original Data")
gglagplot(diff(diff(maints, lag = 1), lag = 1), title = "Lag = 1")
ggAcf(diff(diff(maints, lag = 1), lag = 1), title = "Lag = 1")
gglagplot(diff(diff(maints, lag = 12), lag = 1), title = "Lag = 12")
ggAcf(diff(diff(maints, lag = 12), lag = 1), title = "Lag = 12")
gglagplot(maints, main = "Original Data")
ggAcf(maints, maintainer() = "Original Data")
```{r}
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("tidyverse", "forecast", "zoo"),  pkgTest)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load dataset
data <- read_csv("usmelec.csv")
str(data) # Call structure of the data
summary(data) # Call summary statistics for each column
head(data, 5) # Call first 5 observations
tail(data, 5) # Call final 5 observations
colnames(data) # Call column names
lapply(data, typeof) # Call datatypes for each column
# View(data) # View whole dataset
# Confirm data spans years 1973 to 2013, with 12 months each year except
# for 6 months in 2013
min(data$time)
max(data$time)
# Create time series object
maints <- ts(data$val,
start = 1973,
end = 2013,
frequency = 12)
print(maints)
# Create main plot
autoplot(maints, main = "Net Energy Generation in the USA, 1973 - 2013",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
# Create time series object
maints <- ts(data$val,
start = 1973,
end = 2013,
frequency = 12)
print(maints)
# Create main plot
autoplot(maints, main = "Net Energy Generation in the USA, 1973 - 2013",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
# Decompose the time series into seasonal, trend, and remainder components
decomp <- stl(maints, s.window = "periodic")
# Plot the original time series and its components
autoplot(decomp,
main = "Decomposition of Net Energy Generation in the USA, 1973 - 2013",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
plot(trendcycle(decomp),
main = "Net Energy Generation, 1973 - 2013: Trend",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
plot(seasonal(decomp),
main = "Net Energy Generation, 1973 - 2013: Seasonality (non-adjusted)",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
plot(seasadj(decomp),
main = "Net Energy Generation, 1973 - 2013: Ajusted Seasonality",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
plot(remainder(decomp),
main = "Net Energy Generation, 1973 - 2013: Remaining Variation",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
# Decompose the time series into seasonal, trend, and remainder components
decomp_demo7 <- stl(maints, s.window = 7)
# Plot the original time series and its components
autoplot(decomp_demo,
main = "Decomposition of Net Energy Generation in the USA, 1973 - 2013: Lag = 7",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
# Lag twice to remove trend and seasonality
diff_twice <- diff(diff(maints, lag = 12), lag = 1)
# Assign new ts object
train_twice <- window(diff_twice, end = c(1973, length(diff_twice)))
# Use ses() function for simple exponential smoothing
train_ses <- ses(train_twice,
alpha = 0.05, # Adjust alpha as needed
h = 12) # Forecast 12 periods ahead
checkresiduals(train_ses) # the checkresiduals() function in forecast provides useful plots of residuals, as well as the Ljung-Box test statistic.
# Generate forecasts
forecasted_values <- forecast(train_ses, h = 12)
# Plot the original time series, its components, and the forecast
autoplot(decomp,
series = "Data") +
autolayer(fitted(train_ses), series = "Exponential Smoothing") +
autolayer(forecasted_values, series = "Forecast") +
ggtitle("Decomposition with Exponential Smoothing and Forecast") +
xlab("Months") +
ylab("Billions of Kilowatt Hours Generated (kWh)")
gglagplot(maints, main = "Original Data")
ggAcf(maints, maintainer() = "Original Data")
## For original data
# Fit an ARIMA model using auto.arima function
arima_model1 <- auto.arima(maints)
# Print the model summary
print(summary(arima_model1))
# Extract the chosen ARIMA parameters
chosen_order1 <- arima_model$arma[c(1,6,2)]
gglagplot(maints, main = "Original Data")
ggAcf(maints, maintainer() = "Original Data")
# Generate forecasts
forecasted_values <- forecast(train_ses, h = 12)
# Plot the original time series, its components, and the forecast
autoplot(decomp,
series = "Data") +
autolayer(fitted(train_ses), series = "Exponential Smoothing") +
autolayer(forecasted_values, series = "Forecast") +
ggtitle("Decomposition with Exponential Smoothing and Forecast") +
xlab("Months") +
ylab("Billions of Kilowatt Hours Generated (kWh)")
gglagplot(maints, main = "Original Data")
ggAcf(maints, main = "Original Data")
gglagplot(diff(diff(maints, lag = 1), lag = 1), main = "Lag = 1")
ggAcf(diff(diff(maints, lag = 1), lag = 1), main = "Lag = 1")
gglagplot(diff(diff(maints, lag = 12), lag = 1), main = "Lag = 12")
ggAcf(diff(diff(maints, lag = 12), lag = 1), main = "Lag = 12")
## For original data
# Fit an ARIMA model using auto.arima function
arima_model1 <- auto.arima(maints)
# Print the model summary
print(summary(arima_model1))
# Extract the chosen ARIMA parameters
chosen_order1 <- arima_model1$arma[c(1,6,2)]
# Print the chosen ARIMA parameters
cat("Chosen ARIMA 1 parameters (p,d,q):", chosen_order1, "\n")
## For lagged data
# Fit an ARIMA model using auto.arima function
arima_model2 <- auto.arima(diff(diff(maints, lag = 12), lag = 1))
# Print the model summary
print(summary(arima_model2))
# Extract the chosen ARIMA parameters
chosen_order2 <- arima_model2$arma[c(1,6,2)]
# Print the chosen ARIMA parameters
cat("Chosen ARIMA 2 parameters (p,d,q):", chosen_order2, "\n")
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), residuals1)
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), log(residuals1))
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), exp(residuals1))
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), log(residuals1))
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), sqrt(residuals1))
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), (residuals1)^2)
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), residuals1)
# Decompose the time series into seasonal, trend, and remainder components
decomp_demo7 <- stl(maints, s.window = 7)
# Plot the original time series and its components
autoplot(decomp_demo,
main = "Decomposition of Net Energy Generation in the USA, 1973 - 2013: Lag = 7",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
# Decompose the time series into seasonal, trend, and remainder components
decomp_demo7 <- stl(maints, s.window = 7)
# Plot the original time series and its components
autoplot(decomp_demo7,
main = "Decomposition of Net Energy Generation in the USA, 1973 - 2013: Lag = 7",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
# Decompose the time series into seasonal, trend, and remainder components
decomp_demo12 <- stl(maints, s.window = 12)
# Plot the original time series and its components
autoplot(decomp_demo12,
main = "Decomposition of Net Energy Generation in the USA, 1973 - 2013: Lag = 12",
xlab = "Months",
ylab = "Billions of Kilowatt Hours Generated (kWh)")
# Lag twice to remove trend and seasonality
diff_twice <- diff(diff(maints, lag = 12), lag = 1)
# Assign new ts object
train_twice <- window(diff_twice, end = c(1973, length(diff_twice)))
# Use ses() function for simple exponential smoothing
train_ses <- ses(train_twice,
alpha = 0.05, # Adjust alpha as needed
h = 12) # Forecast 12 periods ahead
checkresiduals(train_ses) # the checkresiduals() function in forecast provides useful plots of residuals, as well as the Ljung-Box test statistic.
# Generate forecasts
forecasted_values <- forecast(train_ses, h = 12)
# Plot the original time series, its components, and the forecast
autoplot(decomp,
series = "Data") +
autolayer(fitted(train_ses), series = "Exponential Smoothing") +
autolayer(forecasted_values, series = "Forecast") +
ggtitle("Decomposition with Exponential Smoothing and Forecast") +
xlab("Months") +
ylab("Billions of Kilowatt Hours Generated (kWh)")
residuals1 <- residuals(arima_model1)
Acf(residuals1)
residuals2 <- residuals(arima_model2)
Acf(residuals2)
plot(fitted(arima_model1), residuals1, main = "Model 1")
plot(fitted(arima_model2), residuals2, main = "Model 2")
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("eha", "survival", "ggplot2", "ggfortify", "stargazer"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# load data
data <- child
# Inspect data
str(data) # Call structure of the data
summary(data) # Call summary statistics for each column
head(data, 5) # Call first 5 observations
tail(data, 5) # Call final 5 observations
colnames(data) # Call column names
print(unique(data$socBranch)) # Call names of the father's working branch
# Create survival object
child_surv <- with(data, Surv(enter, exit, event))
class(child_surv) # confirms survival object class
data1 <- data
# Define the boundaries for the age groups
age_breaks <- c(15, 18, 25, 35, 45, 51)
# Create labels for the age groups
age_labels <- c("15-17", "18-24", "25-34", "35-44", "45-54")
# Create the new variable m.age_bins by categorizing age into the specified groups
data1$m.age_bins <- cut(data$m.age, breaks = age_breaks, labels = age_labels, right = FALSE)
# Inspect new variable and check level order is correct
print(data1$m.age_bins)
table(data1$m.age_bins) # Check contingency table
levels(data1$m.age_bins)
# Create second survival object
child_surv1 <- with(data1, Surv(enter, exit, event))
# Create second survival object
child_surv1 <- with(data1, Surv(enter, exit, event))
class(child_surv) # confirms survival object class
# Overall Survival For reference
pdf("overall.pdf", height=8.5, width=11)
km <- survfit(child_surv ~ 1, data = child)
pdf("overall.pdf", height=8.5, width=11)
km <- survfit(child_surv ~ 1, data = child)
summary(km, times = seq(0, 15, 1))
autoplot(km, main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off() # Alternative plot
# Survival by Mother's Age
pdf("age.pdf", height=8.5, width=11)
km_age <- survfit(child_surv1 ~ m.age_bins, data = data1)
summary(km_age, times = seq(0, 15, 1))
autoplot(km_age,
main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability")
dev.off() # Alternative plot
# Survival By Infants Sex
pdf("sex.pdf", height=8.5, width=11)
km_sex <- survfit(child_surv ~ sex, data = child)
summary(km_sex)
autoplot(km_sex, main = "Kaplan-Meier Plot: Child's Sex",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off() # Alternative plot
pdf("overall.pdf", height=8.5, width=11)
km <- survfit(child_surv ~ 1, data = child)
summary(km, times = seq(0, 15, 1))
autoplot(km, main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off()
# Survival by Mother's Age
pdf("age.pdf", height=8.5, width=11)
km_age <- survfit(child_surv1 ~ m.age_bins, data = data1)
summary(km_age, times = seq(0, 15, 1))
autoplot(km_age,
main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability")
dev.off()
# Survival By Infants Sex
pdf("sex.pdf", height=8.5, width=11)
km_sex <- survfit(child_surv ~ sex, data = child)
summary(km_sex)
autoplot(km_sex, main = "Kaplan-Meier Plot: Child's Sex",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off()
getwd()
km_sex <- survfit(child_surv ~ sex, data = child)
summary(km_sex)
autoplot(km_sex, main = "Kaplan-Meier Plot: Child's Sex",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
autoplot(km_sex, main = "Kaplan-Meier Plot: Child's Sex",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off()
pdf("sex.pdf", height=8.5, width=11)
km_sex <- survfit(child_surv ~ sex, data = child)
summary(km_sex)
autoplot(km_sex, main = "Kaplan-Meier Plot: Child's Sex",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off()
autoplot(km_sex, main = "Kaplan-Meier Plot: Child's Sex",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
autoplot(km_age,
main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability")
autoplot(km, main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
# Create CPH models
cox1 <- coxph(child_surv ~ m.age + sex, data = data)
summary(cox1)
cox2 <- coxph(child_surv ~ m.age * sex, data = data)
summary(cox2)
drop1(cox1, test = "Chisq")
drop1(cox2, test = "Chisq")
drop1(cox1, cox2, test = "Chisq")
stargazer(cox1, type = "text")
stargazer(cox2, type = "text")
autoplot(km_age,
main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability")
# Find max/mean age
max(data1$m.age)
min(data1$m.age)
# Find max/mean age
round(max(data1$m.age)) # is 15
round(min(data1$m.age))
# Find max/mean age
max(data1$m.age) # is 15
# Overall Survival For reference
pdf("overall.pdf", height=8.5, width=11)
km <- survfit(child_surv ~ 1, data = child)
summary(km, times = seq(0, 15, 1))
autoplot(km, #main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off()
# Survival by Mother's Age
pdf("age.pdf", height=8.5, width=11)
km_age <- survfit(child_surv1 ~ m.age_bins, data = data1)
summary(km_age, times = seq(0, 15, 1))
autoplot(km_age,
#main = "Kaplan-Meier Plot: Mother's Age",
xlab = "Years",
ylab = "Estimated Survival Probability")
dev.off()
# Survival By Infants Sex
pdf("sex.pdf", height=8.5, width=11)
km_sex <- survfit(child_surv ~ sex, data = child)
summary(km_sex)
autoplot(km_sex, #main = "Kaplan-Meier Plot: Child's Sex",
xlab = "Years",
ylab = "Estimated Survival Probability",
ylim = c(0.7, 1))
dev.off()
table(child_surv1)
xtable(child_surv1)
table(child_surv1)
table(child_surv1)
table(data1)
table(data1$m.age_bins)
# Create contingency table for Mother's Age bins
table <- table(data1$m.age_bins)
stargazer(table, type = "latex")
# Create contingency table for Mother's Age bins
table <- table(data1$m.age_bins)
stargazer(table, type = "latex")
table
class(table)
typeof(table)
stargazer(table, type = "latex")
class(child_surv) # confirms survival object class
class(data1)
# Create contingency table for Mother's Age bins
table <- as.data.frame(table(data1$m.age_bins))
table
xtable(table, type = "latex")
lapply(c("eha", "survival", "ggplot2", "ggfortify", "stargazer", "xtable"),  pkgTest)
xtable(table, type = "latex")
summary(cox2)
drop1(cox1, test = "Chisq")
drop1(cox2, test = "Chisq")
drop1
test1 <- drop1(cox1, test = "Chisq")
test2 <- drop1(cox2, test = "Chisq")
test1
drop1(cox1, cox2, test = "Chisq")
combined <- cbind(test1, test2)
# Conduct Chi-Square Tests and Compare
test1 <- drop1(cox1, test = "Chisq")
test2 <- drop1(cox2, test = "Chisq")
combined <- cbind(test1, test2)
combined <- merge(test1, test2, by = "row.names", all.x = TRUE)
combined
combined <- merge(test1, test2, by = "col.names", all.x = TRUE)
combined <- merge(test1, test2, by = "column.names", all.x = TRUE)
test1
stargazer(test1, type = "latex")
combined <- merge(cox1, cox2, by = "column.names", all.x = TRUE)
xtable(cox1, cox2)
stargazer(cox1, type = "latex")
stargazer(cox2, type = "latex")
xtable(table, type = "latex")
test1
test2
rm(list=ls()) #clear workspace
install.packages(c("readxl", "quantmod", "tseries", "plm", "punitroots", "tidyr", "kader"))
install.packages(c("readxl", "quantmod", "tseries", "plm", "punitroots", "tidyr", "kader"))
